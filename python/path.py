import gmplot
import math
from scipy import optimize
import matplotlib.pyplot as plt
import numpy as np

lats = [42.371048, 42.368632, 42.360855, 42.359038, 42.343444, 42.340393, 42.333535, 42.331213, 42.332889, 42.331979, 42.330677, 42.330037]
lons = [-71.116074, -71.109294, -71.096016, -71.093586, -71.085840, -71.081463, -71.073351, -71.076999, -71.081076, -71.081699, -71.083244, -71.084317]
boston_lat = 42.3528
boston_lon = -71.1048
n = len(lats)
# gmap = gmplot.GoogleMapPlotter(boston_lat, boston_lon, 14)
# gmap.scatter(lats, lons, '#3B0B39', size=40, marker=False)
# gmap.draw("mymap.html")

# Convert to a reasonable x,y paramaterization
def gps_to_xy(lats,lons):
    # radius of earth, pretty rough though
    R = 6371* 10
    xs = [-R*lons[i]*math.cos(lats[0]*180/math.pi) for i in range(len(lats))]
    # mx = min(xs)
    # xs = [x-mx for x in xs]

    ys = [R*lats[i] for i in range(len(lats))]
    # my = min(ys)
    # ys = [y-my for y in ys]
    return xs,ys

# Takes in a point (x,y) and a set of points (xs,ys) which create a piecewise linear path
# Then projects the point onto the closest linear section of that path
def project(x,y,xs,ys):
    smallest_d = "Taylor"
    point = None
    for i in range(len(xs)-1):
        x1,x2 = xs[i],xs[i+1]
        y1,y2 = ys[i],ys[i+1]
        c = closest_point((x1,y1),(x2,y2),(x,y))
        d = np.linalg.norm(np.subtract(c,(x,y)))
        if d < smallest_d:
            smallest_d = d
            point = c
    return point

def closest_point(a, b, p):
    a_to_p = np.subtract(p,a)
    a_to_b = np.subtract(b,a)
    proj = np.dot(a_to_p,a_to_b)/np.linalg.norm(a_to_b)
    return np.add(a,proj*a_to_b/np.linalg.norm(a_to_b))

samples = [(73.37655118992552, 2783.413447999861), (73.19982539210469, 2783.5599809996784), (73.37655118992552, 2783.413447999861), (73.19982539210469, 2783.5599809996784), (73.19982539210469, 2783.5599809996784), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (58.304365303367376, 2787.395322999917), (4.998815418686718, 2894.173283000011), (6.781221320852637, 2859.4895589998923), (6.781221320852637, 2859.4895589998923), (213.94929995993152, 2854.2334839999676), (4.998815418686718, 2894.173283000011), (4.998815418686718, 2894.173283000011), (162.97148129763082, 2708.5096010002308), (213.94929995993152, 2854.2334839999676), (213.94929995993152, 2854.2334839999676), (162.97148129763082, 2708.5096010002308), (162.97148129763082, 2708.5096010002308), (318.15692888060585, 2578.3755549998023), (142.11278786463663, 2664.5242169997655), (142.11278786463663, 2664.5242169997655), (271.4053814355284, 2601.336638999637), (318.15692888060585, 2578.3755549998023), (318.15692888060585, 2578.3755549998023), (656.8443461414427, 2378.0458309999667)]

xp = [0,1,1]
yp = [0,0,-1]
print(project(0.5,0.5,xp,yp))
xs,ys = gps_to_xy(lats,lons)
for p in samples:
    x,y = p
    print(project(x,y,xs,ys))

ps = [project(x,y,xs,ys) for (x,y) in samples]
for p in ps:
    print(p)
print(zip(xs,ys))
plt.plot(xs, ys, "o")
# plt.plot([x[0] for x in samples],[x[1] for x in samples], "b")
plt.axis('equal')
plt.show()
# plt.show()
